{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContacts } from './operations';\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: [],\n  reducers: {\n    addContact(state, action) {\n      return { ...state,\n        items: [...state.items, action.payload]\n      };\n    },\n\n    deleteContact(state, action) {\n      return state.filter(contact => contact.id !== action.payload);\n    }\n\n  },\n  extraReducers: {\n    [fetchContacts.fulfilled]: (_, action) => action.payload\n  }\n});\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    addFilter(_, action) {\n      return action.payload;\n    }\n\n  }\n});\nconst loadingSlice = createSlice({\n  name: 'isLoading',\n  initialState: false,\n  reducers: {\n    [fetchContacts.pending]: () => true,\n    [fetchContacts.fulfilled]: () => false,\n    [fetchContacts.rejected]: () => false\n  }\n});\nexport const {\n  addContact,\n  deleteContact\n} = contactsSlice.actions;\nexport const {\n  addFilter\n} = filterSlice.actions;\nexport const rootReducer = combineReducers({\n  items: contactsSlice.reducer,\n  isLoading: loadingSlice.reducer,\n  filter: filterSlice.reducer\n});","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/slices.js"],"names":["createSlice","combineReducers","fetchContacts","contactsSlice","name","initialState","reducers","addContact","state","action","items","payload","deleteContact","filter","contact","id","extraReducers","fulfilled","_","filterSlice","addFilter","loadingSlice","pending","rejected","actions","rootReducer","reducer","isLoading"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,MAAMC,aAAa,GAAGH,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,UADwB;AAE9BC,EAAAA,YAAY,EAAG,EAFe;AAG9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EAAC,GAAGD,KAAJ;AAAWE,QAAAA,KAAK,EAAE,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBD,MAAM,CAACE,OAAxB;AAAlB,OAAP;AACH,KAHK;;AAINC,IAAAA,aAAa,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACzB,aAAOD,KAAK,CAACK,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAA9C,CAAP;AACH;;AANK,GAHoB;AAW9BK,EAAAA,aAAa,EAAE;AACX,KAACd,aAAa,CAACe,SAAf,GAA2B,CAACC,CAAD,EAAIT,MAAJ,KAAeA,MAAM,CAACE;AADtC;AAXe,CAAD,CAAjC;AAiBA,MAAMQ,WAAW,GAAGnB,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,QADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACNc,IAAAA,SAAS,CAACF,CAAD,EAAIT,MAAJ,EAAY;AACjB,aAAOA,MAAM,CAACE,OAAd;AACH;;AAHK;AAHkB,CAAD,CAA/B;AAUA,MAAMU,YAAY,GAAGrB,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,WADuB;AAE7BC,EAAAA,YAAY,EAAE,KAFe;AAG7BC,EAAAA,QAAQ,EAAE;AACN,KAACJ,aAAa,CAACoB,OAAf,GAAyB,MAAM,IADzB;AAEN,KAACpB,aAAa,CAACe,SAAf,GAA2B,MAAM,KAF3B;AAGN,KAACf,aAAa,CAACqB,QAAf,GAA0B,MAAM;AAH1B;AAHmB,CAAD,CAAhC;AAYA,OAAO,MAAM;AAAEhB,EAAAA,UAAF;AAAcK,EAAAA;AAAd,IAAgCT,aAAa,CAACqB,OAApD;AACP,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAgBD,WAAW,CAACK,OAAlC;AAEP,OAAO,MAAMC,WAAW,GAAGxB,eAAe,CAAC;AAAES,EAAAA,KAAK,EAAEP,aAAa,CAACuB,OAAvB;AAAgCC,EAAAA,SAAS,EAAEN,YAAY,CAACK,OAAxD;AAAiEb,EAAAA,MAAM,EAAEM,WAAW,CAACO;AAArF,CAAD,CAAnC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContacts } from './operations';\n\nconst contactsSlice = createSlice({\n    name: 'contacts',\n    initialState : [],\n    reducers: {\n        addContact(state, action) {\n            return {...state, items: [...state.items, action.payload]}\n        },\n        deleteContact(state, action) {\n            return state.filter(contact => contact.id !== action.payload);\n        }\n    },\n    extraReducers: {\n        [fetchContacts.fulfilled]: (_, action) => action.payload,\n    }\n});\n\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: '',\n    reducers: {\n        addFilter(_, action) {\n            return action.payload;\n        },\n    }\n});\n\nconst loadingSlice = createSlice({\n    name: 'isLoading',\n    initialState: false,\n    reducers: {\n        [fetchContacts.pending]: () => true,\n        [fetchContacts.fulfilled]: () => false,\n        [fetchContacts.rejected]: () => false,\n\n    }\n});\n\n\nexport const { addContact, deleteContact } = contactsSlice.actions;\nexport const { addFilter } = filterSlice.actions;\n\nexport const rootReducer = combineReducers({ items: contactsSlice.reducer, isLoading: loadingSlice.reducer, filter: filterSlice.reducer });\n"]},"metadata":{},"sourceType":"module"}
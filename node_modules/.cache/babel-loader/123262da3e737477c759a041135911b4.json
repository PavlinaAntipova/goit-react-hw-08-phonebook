{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContactsOperation, deleteContactOperation, addContactOperation } from './contacts-operations';\nconst initialState = {\n  item: [],\n  filter: '',\n  isLoading: false,\n  error: null\n};\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchContactsOperation.fulfilled]: (_ref, action) => {\n      let {\n        items\n      } = _ref;\n      return items = action.payload;\n    },\n    [deleteContactOperation.fulfilled]: (_ref2, action) => {\n      let {\n        items\n      } = _ref2;\n      return items.filter(contact => contact.id !== action.payload.id);\n    },\n    [addContactOperation.fulfilled]: (_ref3, action) => {\n      let {\n        items\n      } = _ref3;\n      return items = [...action.payload];\n    }\n  }\n}); // const contactsSlice = createSlice({\n//     name: 'contacts',\n//     initialState : [],\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n//         [deleteContactOperation.fulfilled]: (state, action) => filter(contact => contact.id !== action.payload.id),\n//         [addContactOperation.fulfilled]: (state, action) => [...state, action.payload],\n//     }\n// });\n// const filterSlice = createSlice({\n//     name: 'filter',\n//     initialState: '',\n//     reducers: {\n//         addFilter(_, action) {\n//             return action.payload;\n//         },\n//     }\n// });\n// const loadingSlice = createSlice({\n//     name: 'loading',\n//     initialState: false,\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.pending]: () => true,\n//         [deleteContactOperation.pending]: () => true,\n//         [addContactOperation.pending]: () => true,\n//         [fetchContactsOperation.fulfilled]: () => false,\n//         [deleteContactOperation.fulfilled]: () => false,\n//         [addContactOperation.fulfilled]: () => false,\n//         [fetchContactsOperation.rejected]: () => false,\n//         [deleteContactOperation.rejected]: () => false,\n//         [addContactOperation.rejected]: () => false,\n//     }\n// });\n// const errorSlice = createSlice({\n//     name: 'error',\n//     initialState: null,\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.rejected]: (_, error) => error,\n//         [deleteContactOperation.rejected]: (_, error) => error,\n//         [addContactOperation.rejected]: (_, error) => error,\n//     }\n// });\n// export const { addFilter } = filterSlice.actions;\n// export const contactsReducer = combineReducers({ items: contactsSlice.reducer, isLoading: loadingSlice.reducer, error: errorSlice.reducer, filter: filterSlice.reducer });","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/redux/contacts/contacts-slice.js"],"names":["createSlice","combineReducers","fetchContactsOperation","deleteContactOperation","addContactOperation","initialState","item","filter","isLoading","error","contactsSlice","name","reducers","extraReducers","fulfilled","action","items","payload","contact","id"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,EAAyDC,mBAAzD,QAAoF,uBAApF;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,MAAMC,aAAa,GAAGV,WAAW,CAAC;AAC9BW,EAAAA,IAAI,EAAE,UADwB;AAE9BN,EAAAA,YAF8B;AAG9BO,EAAAA,QAAQ,EAAE,EAHoB;AAI9BC,EAAAA,aAAa,EAAE;AACX,KAACX,sBAAsB,CAACY,SAAxB,GAAoC,OAAUC,MAAV;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,aAAqBA,KAAK,GAAGD,MAAM,CAACE,OAApC;AAAA,KADzB;AAEX,KAACd,sBAAsB,CAACW,SAAxB,GAAoC,QAAUC,MAAV;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,aAAqBA,KAAK,CAACT,MAAN,CAAaW,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,MAAM,CAACE,OAAP,CAAeE,EAAtD,CAArB;AAAA,KAFzB;AAGX,KAACf,mBAAmB,CAACU,SAArB,GAAiC,QAAUC,MAAV;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,aAAqBA,KAAK,GAAG,CAAC,GAAGD,MAAM,CAACE,OAAX,CAA7B;AAAA;AAHtB;AAJe,CAAD,CAAjC,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContactsOperation, deleteContactOperation, addContactOperation } from './contacts-operations';\n\nconst initialState = {\n  item: [],\n  filter: '',\n  isLoading: false,\n  error: null,\n};\n\nconst contactsSlice = createSlice({\n    name: 'contacts',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [fetchContactsOperation.fulfilled]: ({items}, action) => items = action.payload,\n        [deleteContactOperation.fulfilled]: ({items}, action) => items.filter(contact => contact.id !== action.payload.id),\n        [addContactOperation.fulfilled]: ({items}, action) => items = [...action.payload],\n    }\n});\n\n\n// const contactsSlice = createSlice({\n//     name: 'contacts',\n//     initialState : [],\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n//         [deleteContactOperation.fulfilled]: (state, action) => filter(contact => contact.id !== action.payload.id),\n//         [addContactOperation.fulfilled]: (state, action) => [...state, action.payload],\n//     }\n// });\n\n\n// const filterSlice = createSlice({\n//     name: 'filter',\n//     initialState: '',\n//     reducers: {\n//         addFilter(_, action) {\n//             return action.payload;\n//         },\n//     }\n// });\n\n// const loadingSlice = createSlice({\n//     name: 'loading',\n//     initialState: false,\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.pending]: () => true,\n//         [deleteContactOperation.pending]: () => true,\n//         [addContactOperation.pending]: () => true,\n//         [fetchContactsOperation.fulfilled]: () => false,\n//         [deleteContactOperation.fulfilled]: () => false,\n//         [addContactOperation.fulfilled]: () => false,\n//         [fetchContactsOperation.rejected]: () => false,\n//         [deleteContactOperation.rejected]: () => false,\n//         [addContactOperation.rejected]: () => false,\n\n//     }\n// });\n\n// const errorSlice = createSlice({\n//     name: 'error',\n//     initialState: null,\n//     reducers: {},\n//     extraReducers: {\n//         [fetchContactsOperation.rejected]: (_, error) => error,\n//         [deleteContactOperation.rejected]: (_, error) => error,\n//         [addContactOperation.rejected]: (_, error) => error,\n//     }\n// });\n\n\n\n// export const { addFilter } = filterSlice.actions;\n\n// export const contactsReducer = combineReducers({ items: contactsSlice.reducer, isLoading: loadingSlice.reducer, error: errorSlice.reducer, filter: filterSlice.reducer });"]},"metadata":{},"sourceType":"module"}
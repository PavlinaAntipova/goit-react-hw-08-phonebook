{"ast":null,"code":"var _jsxFileName = \"/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/components/PublicRoute.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PublicRoute(_ref) {\n  _s();\n\n  let {\n    children,\n    restricted = false,\n    redirectTo = '/'\n  } = _ref;\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n\n  if (shouldRedirect) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: redirectTo,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 14\n    }, this);\n  }\n\n  return children;\n}\n\n_s(PublicRoute, \"wwozkPYuXjHFfszlt2mcSB3o0is=\", false, function () {\n  return [useSelector];\n});\n\n_c = PublicRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/components/PublicRoute.js"],"names":["useSelector","Navigate","PublicRoute","children","restricted","redirectTo","isLoggedIn","state","auth","shouldRedirect"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAGA,eAAe,SAASC,WAAT,OAIZ;AAAA;;AAAA,MAJiC;AAClCC,IAAAA,QADkC;AAElCC,IAAAA,UAAU,GAAG,KAFqB;AAGlCC,IAAAA,UAAU,GAAG;AAHqB,GAIjC;AACC,QAAMC,UAAU,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,UAArB,CAA9B;AACA,QAAMG,cAAc,GAAGH,UAAU,IAAIF,UAArC;;AAGF,MAAIK,cAAJ,EAAoB;AAChB,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEJ,UAAd;AAA0B,MAAA,OAAO;AAAjC;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACC,SAAOF,QAAP;AAEH;;GAduBD,W;UAKDF,W;;;KALCE,W","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\n\nexport default function PublicRoute({\n  children,\n  restricted = false,\n  redirectTo = '/',\n}) {\n    const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n    const shouldRedirect = isLoggedIn && restricted;\n    \n\n  if (shouldRedirect) {\n      return <Navigate to={redirectTo} replace />\n  }\n    return children;\n\n}"]},"metadata":{},"sourceType":"module"}
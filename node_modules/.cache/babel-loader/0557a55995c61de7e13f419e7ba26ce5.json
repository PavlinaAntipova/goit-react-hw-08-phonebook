{"ast":null,"code":"var _jsxFileName = \"/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/components/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { Route, Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PrivateRoute(_ref) {\n  _s();\n\n  let {\n    children,\n    redirectTo = '/',\n    ...routeProps\n  } = _ref;\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  return /*#__PURE__*/_jsxDEV(Route, { ...routeProps,\n    children: isLoggedIn ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n      replace: true,\n      to: redirectTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PrivateRoute, \"wwozkPYuXjHFfszlt2mcSB3o0is=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/components/PrivateRoute.js"],"names":["useSelector","Route","Navigate","PrivateRoute","children","redirectTo","routeProps","isLoggedIn","state","auth"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;AAEA,eAAe,SAASC,YAAT,OAIZ;AAAA;;AAAA,MAJkC;AACnCC,IAAAA,QADmC;AAEnCC,IAAAA,UAAU,GAAG,GAFsB;AAGnC,OAAGC;AAHgC,GAIlC;AACC,QAAMC,UAAU,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,UAArB,CAA9B;AAEF,sBACE,QAAC,KAAD,OAAWD,UAAX;AAAA,cACGC,UAAU,GAAGH,QAAH,gBAAc,QAAC,QAAD;AAAU,MAAA,OAAO,MAAjB;AAAkB,MAAA,EAAE,EAAEC;AAAtB;AAAA;AAAA;AAAA;AAAA;AAD3B;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAZuBF,Y;UAKDH,W;;;KALCG,Y","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Route, Navigate } from 'react-router-dom';\n\nexport default function PrivateRoute({\n  children,\n  redirectTo = '/',\n  ...routeProps\n}) {\n    const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n    \n  return (\n    <Route {...routeProps}>\n      {isLoggedIn ? children : <Navigate replace to={redirectTo} />}\n    </Route>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
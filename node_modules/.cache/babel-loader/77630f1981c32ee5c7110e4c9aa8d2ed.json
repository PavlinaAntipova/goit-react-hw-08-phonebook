{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContactsOperation, deleteContactOperation, addContactOperation } from './operations';\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: [],\n  reducers: {},\n  extraReducers: {\n    [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n    [deleteContactOperation.fulfilled]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n    [addContactOperation.fulfilled]: (state, action) => [...state, action.payload]\n  }\n});\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    addFilter(_, action) {\n      return action.payload;\n    }\n\n  }\n});\nconst loadingSlice = createSlice({\n  name: 'loading',\n  initialState: false,\n  reducers: {},\n  extraReducers: {\n    [fetchContactsOperation.pending]: (_, action) => action.payload,\n    [deleteContactOperation.pending]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n    [addContactOperation.pending]: (state, action) => [...state, action.payload]\n  }\n});\nconst errorSlice = createSlice({\n  name: 'error',\n  initialState: null,\n  reducers: {},\n  extraReducers: {\n    [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n    [deleteContactOperation.fulfilled]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n    [addContactOperation.fulfilled]: (state, action) => [...state, action.payload]\n  }\n});\nexport const {\n  addContact,\n  deleteContact\n} = contactsSlice.actions;\nexport const {\n  addFilter\n} = filterSlice.actions;\nexport const rootReducer = combineReducers({\n  items: contactsSlice.reducer,\n  isLoading: loadingSlice,\n  error: errorSlice,\n  filter: filterSlice.reducer\n});","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/slices.js"],"names":["createSlice","combineReducers","fetchContactsOperation","deleteContactOperation","addContactOperation","contactsSlice","name","initialState","reducers","extraReducers","fulfilled","_","action","payload","state","filter","contact","id","filterSlice","addFilter","loadingSlice","pending","errorSlice","addContact","deleteContact","actions","rootReducer","items","reducer","isLoading","error"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContactsOperation, deleteContactOperation, addContactOperation } from './operations';\n\nconst contactsSlice = createSlice({\n    name: 'contacts',\n    initialState : [],\n    reducers: {},\n    extraReducers: {\n        [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n        [deleteContactOperation.fulfilled]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n        [addContactOperation.fulfilled]: (state, action) => [...state, action.payload],\n    }\n});\n\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: '',\n    reducers: {\n        addFilter(_, action) {\n            return action.payload;\n        },\n    }\n});\n\nconst loadingSlice = createSlice({\n    name: 'loading',\n    initialState: false,\n    reducers: {},\n    extraReducers: {\n        [fetchContactsOperation.pending]: (_, action) => action.payload,\n        [deleteContactOperation.pending]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n        [addContactOperation.pending]: (state, action) => [...state, action.payload],\n\n    }\n});\n\nconst errorSlice = createSlice({\n    name: 'error',\n    initialState: null,\n    reducers: {},\n    extraReducers: {\n        [fetchContactsOperation.fulfilled]: (_, action) => action.payload,\n        [deleteContactOperation.fulfilled]: (state, action) => state.filter(contact => contact.id !== action.payload.id),\n        [addContactOperation.fulfilled]: (state, action) => [...state, action.payload],\n\n    }\n});\n\n\nexport const { addContact, deleteContact } = contactsSlice.actions;\nexport const { addFilter } = filterSlice.actions;\n\nexport const rootReducer = combineReducers({ items: contactsSlice.reducer, isLoading: loadingSlice, error: errorSlice, filter: filterSlice.reducer });\n"]},"metadata":{},"sourceType":"module"}
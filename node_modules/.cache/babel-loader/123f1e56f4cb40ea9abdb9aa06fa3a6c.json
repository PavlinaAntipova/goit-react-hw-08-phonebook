{"ast":null,"code":"import _slicedToArray from\"/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useSelector,useDispatch}from'react-redux';import{addContact}from'redux/contacts/contacts-operations';import s from'./FormContacts.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function FormContacts(){var dispatch=useDispatch();var contacts=useSelector(function(state){return state.contacts.items;});var _useState=useState(''),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),number=_useState4[0],setNumber=_useState4[1];var reset=function reset(){setName('');setNumber('');};var checkingExistContact=contacts.find(function(contact){return contact.name===name;});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Contacts\"}),/*#__PURE__*/_jsxs(\"form\",{className:s.Form,onSubmit:function onSubmit(e){e.preventDefault();if(checkingExistContact){alert(\"\".concat(name,\" is already in the contacts!\"));reset();return;}dispatch(addContact({name:name,number:number}));reset();},children:[/*#__PURE__*/_jsxs(\"label\",{className:s.name,children:[\"Name\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",placeholder:\"name goes here\",required:true,value:name,onChange:function onChange(e){setName(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"label\",{className:s.phone,children:[\"Phone\",/*#__PURE__*/_jsx(\"input\",{type:\"tel\",name:\"number\",pattern:\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",title:\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",placeholder:\"number goes here\",required:true,value:number,onChange:function onChange(e){setNumber(e.target.value);}})]}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",type:\"submit\",children:\"Add Contact\"})]})]});}","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-08-phonebook/src/components/FormContacts/FormContacts.jsx"],"names":["React","useState","useSelector","useDispatch","addContact","s","FormContacts","dispatch","contacts","state","items","name","setName","number","setNumber","reset","checkingExistContact","find","contact","Form","e","preventDefault","alert","target","value","phone"],"mappings":"gJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,UAAT,KAA2B,oCAA3B,CAEA,MAAOC,CAAAA,CAAP,KAAc,2BAAd,C,6IAEA,cAAe,SAASC,CAAAA,YAAT,EAAwB,CACrC,GAAMC,CAAAA,QAAQ,CAAGJ,WAAW,EAA5B,CACA,GAAMK,CAAAA,QAAQ,CAAGN,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACD,QAAN,CAAeE,KAA1B,EAAD,CAA5B,CAEA,cAAwBT,QAAQ,CAAC,EAAD,CAAhC,wCAAOU,IAAP,eAAaC,OAAb,eACA,eAA4BX,QAAQ,CAAC,EAAD,CAApC,yCAAOY,MAAP,eAAeC,SAAf,eAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CACZH,OAAO,CAAC,EAAD,CAAP,CACAE,SAAS,CAAC,EAAD,CAAT,CACP,CAHD,CAKA,GAAME,CAAAA,oBAAoB,CAAGR,QAAQ,CAACS,IAAT,CAAc,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACP,IAAR,GAAiBA,IAArB,EAArB,CAA7B,CACA,mBACE,wCAAE,gCAAF,cACE,cACA,SAAS,CAAEN,CAAC,CAACc,IADb,CAEA,QAAQ,CAAE,kBAAAC,CAAC,CAAI,CACbA,CAAC,CAACC,cAAF,GACA,GAAIL,oBAAJ,CAA0B,CACxBM,KAAK,WAAIX,IAAJ,iCAAL,CACAI,KAAK,GACL,OACD,CACDR,QAAQ,CAACH,UAAU,CAAC,CAAEO,IAAI,CAAJA,IAAF,CAAQE,MAAM,CAANA,MAAR,CAAD,CAAX,CAAR,CACAE,KAAK,GACN,CAXD,wBAaE,eAAO,SAAS,CAAEV,CAAC,CAACM,IAApB,+BAEE,cACE,IAAI,CAAC,MADP,CAEE,IAAI,CAAC,MAFP,CAGE,OAAO,CAAC,wHAHV,CAIE,KAAK,CAAC,wIAJR,CAKE,WAAW,CAAC,gBALd,CAME,QAAQ,KANV,CAOE,KAAK,CAAEA,IAPT,CAQE,QAAQ,CAAE,kBAAAS,CAAC,CAAI,CAACR,OAAO,CAAEQ,CAAC,CAACG,MAAF,CAASC,KAAX,CAAP,CAAyB,CAR3C,EAFF,GAbF,cA0BE,eAAO,SAAS,CAAEnB,CAAC,CAACoB,KAApB,gCAEE,cACE,IAAI,CAAC,KADP,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAC,wFAHV,CAIE,KAAK,CAAC,8FAJR,CAKE,WAAW,CAAC,kBALd,CAME,QAAQ,KANV,CAOE,KAAK,CAAEZ,MAPT,CAQE,QAAQ,CAAE,kBAAAO,CAAC,CAAI,CAACN,SAAS,CAAEM,CAAC,CAACG,MAAF,CAASC,KAAX,CAAT,CAA2B,CAR7C,EAFF,GA1BF,cAuCE,eAAQ,SAAS,CAAC,QAAlB,CAA2B,IAAI,CAAC,QAAhC,yBAvCF,GADF,GADF,CA+CD","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nimport s from './FormContacts.module.css';\n\nexport default function FormContacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.contacts.items);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n          setName('');\n          setNumber('');\n  }\n\n  const checkingExistContact = contacts.find(contact => contact.name === name);\n  return (\n    <><h2>Contacts</h2>\n      <form\n      className={s.Form}\n      onSubmit={e => {\n        e.preventDefault();\n        if (checkingExistContact) {\n          alert(`${name} is already in the contacts!`);\n          reset();\n          return;\n        }\n        dispatch(addContact({ name, number }));\n        reset();\n      }}\n      >\n        <label className={s.name}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"name goes here\"\n            required\n            value={name}\n            onChange={e => {setName( e.target.value)}}\n          />\n        </label>\n        <label className={s.phone}>\n          Phone\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"number goes here\"\n            required\n            value={number}\n            onChange={e => {setNumber( e.target.value)}}\n          />\n        </label>\n        <button className='button' type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n      </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
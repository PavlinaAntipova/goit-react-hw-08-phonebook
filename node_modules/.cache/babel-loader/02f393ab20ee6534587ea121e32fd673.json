{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { getContacts } from '../api/api';\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: [],\n  reducers: {\n    addContact(state, action) {\n      state.items = [...state.items, action.payload];\n    },\n\n    deleteContact(state, action) {\n      return state.filter(contact => contact.id !== action.payload);\n    }\n\n  } // extraReducers: {\n  //     [fetchContacts.fullfilled]: (state, action) => {\n  //         state.items = [...state.items, action.payload];\n  //     }\n  // }\n\n});\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    addFilter(_, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const {\n  addContact,\n  deleteContact\n} = contactsSlice.actions;\nexport const {\n  addFilter\n} = filterSlice.actions;\nexport const rootReducer = combineReducers({\n  items: contactsSlice.reducer,\n  filter: filterSlice.reducer\n});","map":{"version":3,"sources":["/Users/pashtet/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/slices.js"],"names":["createAsyncThunk","createSlice","combineReducers","getContacts","contactsSlice","name","initialState","reducers","addContact","state","action","items","payload","deleteContact","filter","contact","id","filterSlice","addFilter","_","actions","rootReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,YAA5B;AAKA,MAAMC,aAAa,GAAGH,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,UADwB;AAE9BC,EAAAA,YAAY,EAAG,EAFe;AAG9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtBD,MAAAA,KAAK,CAACE,KAAN,GAAc,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBD,MAAM,CAACE,OAAxB,CAAd;AACH,KAHK;;AAINC,IAAAA,aAAa,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACzB,aAAOD,KAAK,CAACK,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAA9C,CAAP;AACH;;AANK,GAHoB,CAW9B;AACA;AACA;AACA;AACA;;AAf8B,CAAD,CAAjC;AAmBA,MAAMK,WAAW,GAAGhB,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,QADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACNW,IAAAA,SAAS,CAACC,CAAD,EAAIT,MAAJ,EAAY;AACjB,aAAOA,MAAM,CAACE,OAAd;AACH;;AAHK;AAHkB,CAAD,CAA/B;AAaA,OAAO,MAAM;AAAEJ,EAAAA,UAAF;AAAcK,EAAAA;AAAd,IAAgCT,aAAa,CAACgB,OAApD;AACP,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAgBD,WAAW,CAACG,OAAlC;AAEP,OAAO,MAAMC,WAAW,GAAGnB,eAAe,CAAC;AAAES,EAAAA,KAAK,EAAEP,aAAa,CAACkB,OAAvB;AAAgCR,EAAAA,MAAM,EAAEG,WAAW,CAACK;AAApD,CAAD,CAAnC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { getContacts } from '../api/api';\n\n\n\n\nconst contactsSlice = createSlice({\n    name: 'contacts',\n    initialState : [],\n    reducers: {\n        addContact(state, action) {\n            state.items = [...state.items, action.payload];\n        },\n        deleteContact(state, action) {\n            return state.filter(contact => contact.id !== action.payload);\n        }\n    },\n    // extraReducers: {\n    //     [fetchContacts.fullfilled]: (state, action) => {\n    //         state.items = [...state.items, action.payload];\n    //     }\n    // }\n});\n\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: '',\n    reducers: {\n        addFilter(_, action) {\n            return action.payload;\n        },\n    }\n});\n\n\n\n\nexport const { addContact, deleteContact } = contactsSlice.actions;\nexport const { addFilter } = filterSlice.actions;\n\nexport const rootReducer = combineReducers({ items: contactsSlice.reducer, filter: filterSlice.reducer });\n"]},"metadata":{},"sourceType":"module"}